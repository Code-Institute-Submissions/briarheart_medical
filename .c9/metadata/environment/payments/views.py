{"filter":false,"title":"views.py","tooltip":"/payments/views.py","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":147,"column":48},"action":"remove","lines":["<<<<<<< HEAD","import stripe","from django.conf import settings","from django.http.response import JsonResponse, HttpResponse","from django.views.decorators.csrf import csrf_exempt","from django.views.generic.base import TemplateView","","from django.contrib.auth.models import User","","from django.shortcuts import render, redirect","from medications.models import meds","","","","@csrf_exempt","def stripe_config(request):","    if request.method == 'GET':","        stripe_config = {'publicKey': settings.STRIPE_PUBLISHABLE_KEY}","        return JsonResponse(stripe_config, safe=False)","","","@csrf_exempt","def create_checkout_session(request):","    ","    if request.method == 'GET':","        domain_url = 'https://7f403f7cf17a4931845b0aa936c64350.vfs.cloud9.us-east-1.amazonaws.com/'","        stripe.api_key = settings.STRIPE_SECRET_KEY","        try:","","            checkout_session = stripe.checkout.Session.create(","                # client_reference_id=request.user.id if request.user.is_authenticated else None,","                success_url=domain_url + 'success?session_id={CHECKOUT_SESSION_ID}',","                cancel_url=domain_url + 'cancelled/',","                payment_method_types=['card'],","                mode='payment',","                line_items=[","                    {","                        'name': 'Delivery',","                        'quantity': 1,","                        'currency': 'GBP',","                        'amount': '200',","                    }","                ]","            )","            return JsonResponse({'sessionId': checkout_session['id']})","        except Exception as e:","            return JsonResponse({'error': str(e)})","","","@csrf_exempt","def stripe_webhook(request):","    stripe.api_key = settings.STRIPE_SECRET_KEY","    endpoint_secret = settings.STRIPE_ENDPOINT_SECRET","    payload = request.body","    sig_header = request.META['HTTP_STRIPE_SIGNATURE']","    event = None","","    try:","        event = stripe.Webhook.construct_event(","            payload, sig_header, endpoint_secret","        )","    except ValueError as e:","        # Invalid payload","        return HttpResponse(status=400)","    except stripe.error.SignatureVerificationError as e:","        # Invalid signature","        return HttpResponse(status=400)","","    # Handle the checkout.session.completed event","    if event['type'] == 'checkout.session.completed':","        session = event['data']['object']","","        # This method will be called when user successfully purchases something.","        handle_checkout_session(session)","","    return HttpResponse(status=200)","","","def handle_checkout_session(session):","    # client_reference_id = user's id","    client_reference_id = session.get(\"client_reference_id\")","    payment_intent = session.get(\"payment_intent\")","","    if client_reference_id is None:","        # Customer wasn't logged in when purchasing","        return","","    # Customer was logged in we can now fetch the Django user and make changes to our models","    try:","        user = User.objects.get(id=client_reference_id)","        print(user.username, \"just purchased something.\")","","        # TODO: make changes to our models.","","    except User.DoesNotExist:","        pass","","","","","def SuccessView(request, *args, **kwargs):","    \"\"\"Return the home.html file\"\"\"","    ","   ","    return render(request, 'success.html')","","","def CancelledView(request, *args, **kwargs):","    \"\"\"Return the home.html file\"\"\"","    ","   ","    return render(request, 'cancelled.html')","","","@csrf_exempt","def stripe_webhook(request):","    stripe.api_key = settings.STRIPE_SECRET_KEY","    endpoint_secret = 'whsec_TVXgZgjYDrryuUocfcMhUlhoj9p0C0sc'","    payload = request.body","    sig_header = request.META['HTTP_STRIPE_SIGNATURE']","    event = None","","    try:","        event = stripe.Webhook.construct_event(","            payload, sig_header, endpoint_secret","        )","    except ValueError as e:","        # Invalid payload","        return HttpResponse(status=400)","    except stripe.error.SignatureVerificationError as e:","        # Invalid signature","        return HttpResponse(status=400)","","    # Handle the checkout.session.completed event","    print(event['type'])","    if event['type'] == 'checkout.session.completed':","        print(\"Payment was successful.\")","        # TODO: run some custom code here","","    return HttpResponse(status=200)","=======","from django.shortcuts import render","","from django.views.generic.base import TemplateView","","class HomePageView(TemplateView):","    template_name = 'home.html'",">>>>>>> 27185465653bdadd9c4259e549719baed016a333"],"id":2},{"start":{"row":0,"column":0},"end":{"row":138,"column":35},"action":"insert","lines":["import stripe","from django.conf import settings","from django.http.response import JsonResponse, HttpResponse","from django.views.decorators.csrf import csrf_exempt","from django.views.generic.base import TemplateView","","from django.contrib.auth.models import User","","from django.shortcuts import render, redirect","from medications.models import meds","","","","@csrf_exempt","def stripe_config(request):","    if request.method == 'GET':","        stripe_config = {'publicKey': settings.STRIPE_PUBLISHABLE_KEY}","        return JsonResponse(stripe_config, safe=False)","","","@csrf_exempt","def create_checkout_session(request):","    ","    if request.method == 'GET':","        domain_url = 'https://7f403f7cf17a4931845b0aa936c64350.vfs.cloud9.us-east-1.amazonaws.com/'","        stripe.api_key = settings.STRIPE_SECRET_KEY","        try:","","            checkout_session = stripe.checkout.Session.create(","                # client_reference_id=request.user.id if request.user.is_authenticated else None,","                success_url=domain_url + 'success?session_id={CHECKOUT_SESSION_ID}',","                cancel_url=domain_url + 'cancelled/',","                payment_method_types=['card'],","                mode='payment',","                line_items=[","                    {","                        'name': 'Delivery',","                        'quantity': 1,","                        'currency': 'GBP',","                        'amount': '200',","                    }","                ]","            )","            return JsonResponse({'sessionId': checkout_session['id']})","        except Exception as e:","            return JsonResponse({'error': str(e)})","","","@csrf_exempt","def stripe_webhook(request):","    stripe.api_key = settings.STRIPE_SECRET_KEY","    endpoint_secret = settings.STRIPE_ENDPOINT_SECRET","    payload = request.body","    sig_header = request.META['HTTP_STRIPE_SIGNATURE']","    event = None","","    try:","        event = stripe.Webhook.construct_event(","            payload, sig_header, endpoint_secret","        )","    except ValueError as e:","        # Invalid payload","        return HttpResponse(status=400)","    except stripe.error.SignatureVerificationError as e:","        # Invalid signature","        return HttpResponse(status=400)","","    # Handle the checkout.session.completed event","    if event['type'] == 'checkout.session.completed':","        session = event['data']['object']","","        # This method will be called when user successfully purchases something.","        handle_checkout_session(session)","","    return HttpResponse(status=200)","","","def handle_checkout_session(session):","    # client_reference_id = user's id","    client_reference_id = session.get(\"client_reference_id\")","    payment_intent = session.get(\"payment_intent\")","","    if client_reference_id is None:","        # Customer wasn't logged in when purchasing","        return","","    # Customer was logged in we can now fetch the Django user and make changes to our models","    try:","        user = User.objects.get(id=client_reference_id)","        print(user.username, \"just purchased something.\")","","        # TODO: make changes to our models.","","    except User.DoesNotExist:","        pass","","","","","def SuccessView(request, *args, **kwargs):","    \"\"\"Return the home.html file\"\"\"","    ","   ","    return render(request, 'success.html')","","","def CancelledView(request, *args, **kwargs):","    \"\"\"Return the home.html file\"\"\"","    ","   ","    return render(request, 'cancelled.html')","","","@csrf_exempt","def stripe_webhook(request):","    stripe.api_key = settings.STRIPE_SECRET_KEY","    endpoint_secret = 'whsec_TVXgZgjYDrryuUocfcMhUlhoj9p0C0sc'","    payload = request.body","    sig_header = request.META['HTTP_STRIPE_SIGNATURE']","    event = None","","    try:","        event = stripe.Webhook.construct_event(","            payload, sig_header, endpoint_secret","        )","    except ValueError as e:","        # Invalid payload","        return HttpResponse(status=400)","    except stripe.error.SignatureVerificationError as e:","        # Invalid signature","        return HttpResponse(status=400)","","    # Handle the checkout.session.completed event","    print(event['type'])","    if event['type'] == 'checkout.session.completed':","        print(\"Payment was successful.\")","        # TODO: run some custom code here","","    return HttpResponse(status=200)"]}]]},"ace":{"folds":[],"scrolltop":1744,"scrollleft":0,"selection":{"start":{"row":128,"column":36},"end":{"row":128,"column":36},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":123,"state":"start","mode":"ace/mode/python"}},"timestamp":1598915386689,"hash":"387ad9818cc4d314d5d1685d39bd57e3deb51c7d"}